
Done 	- summary text format based on: key, [ok|no] so that the server can easily parse it
Done 	- efficiency, etc. statistics. based on TAG, number also in the summary? statistics section
Done 	- client writes colorized output in console and sends step-by-step progress to server
Done	- Idle State
Done	- Propagate "idle" checking to HTML (logs)
Done	- xml/easier text format YAML --> Plain Python Code!!
Done	- essentia in linux
Done	- Remove "log" sufix in idle methods
Done	- Examples use appropiate logs dir
Done!!	- Adapt to Windows => Bram rules!
Done	- Adapt to MacOS X
Done	- essentia in windows
Done	- BUG : Fix idle messages in console - MS
Done 	- BUG TestFarmClient without name - MS  => But Find Another Clean Way!
Done	- communication via http post 
Done	- Mileston 2: remote server
Done	- Multiple repositories 
Done	- Expandible info (and stats) with javascript - MS
Done	- Integrate Bram's nice javascript
Done	- Multiple clients in a single script (usage_example.py) REJECTED: script==one build
Done	- Think: first iteration new_commits should return always true
Done	- All CLAM tests working in linux - PA
Done	- windows new commits check (INFO:func) => NOT WITH INFO, but a native grep-like command
Done	- mac osx new commits check. why it fails? => it was a run_command bug
Done	- refactoring: remove listener at client constructor



Low Priority
----------------
	- define cvs repository and branch (and backend cvs, svn) so the server can hunt guilty commits.
	  -> write a html column for commits and synchronize commits with boxes.
	- client info to the server. not only the name
	- separate config script and command line tool with options: verbose, disable repository, server url
	  ala scons and SConstruct.  testfarm --verbose --force
	- send mail option?? mmmm... it is up to the StabilityLevelChecker which should be in the server.
	  -> alarms instead of stability level
	- Idle with threading repositories (very low priority)
	  -> or just now allow multiple repositories
	- Now executing con AJAX
	- Nice diagrams: gnuplot, rrdtools, ploticus(*)
	- Nice html, ala tinderbox

Medium Priority
----------------
	- set up a "universal" server for any project (be aware of security issues, spam...)
	  -> Done but inside MTG
	- Stop client "gently"
	  -> Propagate "user aborted" to HTML
	- Mandatory / Breaking tasks
	- Think: Tasks in HTML with proportional size
	- Rotate logs
	- Send begin command --MS
	- CLAM in windows
	- ardour2 in linux
	- verbose client argument: adds info : pass_text to every command

High Priority
----------------
Current	- stats diagrams
	- API: Checking <-> Check. Ask Bram
	  -> assert that name is a string
Done??	- BUG after command completion should update html - MS
Current	- publish (ought to be public) htmls, via scp. add hook to user script? - PA
Current	- CLAM in mac osx
	- CLAM in windows
	- refactoring: remote communication code and (.py) file names
	- refactoring: init project phase
	- refactoring: init client phase
	- organize src directories

	- IMPORTANT refactoring: define new user script. This will have important impact on design.	
	  -> no client, only project object
	  -> find a name for Task concept.
	  -> Task name in the html 
	  -> rename repository->project
	  -> rename client->platform


xxxx
